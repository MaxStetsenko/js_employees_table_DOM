{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","children","tHead","tBody","tableBodyRows","rows","tablesTitles","cells","map","td","textContent","trim","toLowerCase","sortedTable","index","typesSort","AscOrDesc","sort","a","b","partA","innerHTML","partB","getNumbers","localeCompare","forEach","el","append","addEventListener","e","Array","from","target","parentElement","findIndex","classList","contains","remove","toggle","querySelectorAll","th","add","Math","sign","value","row","rowChildren","tablesTitlesLength","length","i","dataset","qa","elem","prevElem","arrCountry","formHtml","country","join","body","insertAdjacentHTML","form","formElements","elements","inputName","name","inputPosition","position","inputOffice","office","inputAge","age","inputSalary","salary","positionMessage","topDefault","rightDefault","top","formValidation","settings","message","errNam","errAge","less","more","success","preventDefault","resultValidation","field","pushNotification","focus","maskNewRow","reset","posTop","posRight","title","description","type","block","setTimeout","convertToCurrent","number","numberResult","Number","toLocaleString","replace","tagName","elemValue","input","selectionStart","event","code"],"mappings":"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","file":"main.2288481d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst [tHead, tBody] = table.children;\nconst tableBodyRows = [...tBody.rows];\nconst tablesTitles = [...tHead.children[0].cells]\n  .map(td => td.textContent.trim().toLowerCase());\n\nfunction sortedTable(index, typesSort, AscOrDesc) {\n  const bodyRows = [...tBody.rows];\n\n  bodyRows.sort((a, b) => {\n    let partA = a.children[index].innerHTML;\n    let partB = b.children[index].innerHTML;\n\n    if (typesSort) {\n      partA = getNumbers(partA);\n      partB = getNumbers(partB);\n\n      return AscOrDesc ? partA - partB : partB - partA;\n    }\n\n    return AscOrDesc ? partA.localeCompare(partB) : partB.localeCompare(partA);\n  }).forEach(el => tBody.append(el));\n}\n\ntHead.addEventListener('click', (e) => {\n  const index = Array.from(e.target.parentElement.children)\n    .findIndex(el => el.innerHTML === e.target.innerHTML);\n  const wasSortingAlready = e.target.classList.contains('sort-asc');\n\n  if (wasSortingAlready) {\n    e.target.classList.remove('sort-asc');\n    e.target.classList.toggle('sort-desc');\n  } else {\n    tHead.querySelectorAll('th').forEach(th =>\n      th.classList.remove('sort-asc', 'sort-desc'));\n    e.target.classList.add('sort-asc');\n  }\n\n  const AscOrDesc = Math.sign(e.target.classList.value === 'sort-asc');\n\n  const columnsWithCellIndexString = 2;\n\n  const typesSort = !Math.sign(index <= columnsWithCellIndexString);\n\n  sortedTable(index, typesSort, AscOrDesc);\n});\n\ntableBodyRows.forEach(row => {\n  const rowChildren = row.children;\n  const tablesTitlesLength = tablesTitles.length;\n\n  for (let i = 0; i < tablesTitlesLength; i++) {\n    if (!rowChildren[i].dataset.qa) {\n      rowChildren[i].dataset.qa = tablesTitles[i];\n    }\n  }\n});\n\ntBody.addEventListener('click', (e) => {\n  const elem = e.target;\n  const prevElem = tBody.querySelector('tr.active');\n\n  if (prevElem) {\n    prevElem.classList.remove('active');\n  }\n\n  elem.parentElement.classList.add('active');\n});\n\nconst arrCountry = [\n  'Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco',\n];\nconst formHtml = `\n  <form action=\"/\" method=\"get\" class=\"new-employee-form\">\n    <label>Name: <input name=\"name\" type=\"text\" autocomplete=\"off\"></label>\n    <label>Position: <input name=\"position\" type=\"text\"></label>\n    <label>Age: <input name=\"age\" type=\"number\"></label>\n    <label>\n      Office: \n      <select name=\"office\">\n      ${arrCountry\n    .map(country => `<option value=\"${country}\">${country}</option>`).join()}\n      </select>\n    </label>\n    <label>Salary: <input name=\"salary\" type=\"number\"></label>\n    <button type=\"submit\">Save to table</button>\n  </form >\n`;\n\ndocument.body.insertAdjacentHTML('beforeend', formHtml);\n\nconst form = document.querySelector('.new-employee-form');\nconst formElements = form.elements;\nconst inputName = formElements.name;\nconst inputPosition = formElements.position;\nconst inputOffice = formElements.office;\nconst inputAge = formElements.age;\nconst inputSalary = formElements.salary;\nconst positionMessage = {\n  topDefault: 10,\n  rightDefault: 10,\n  top: 10,\n};\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const [message, resultValidation, field] = formValidation();\n\n  pushNotification(\n    positionMessage.top,\n    positionMessage.rightDefault,\n    resultValidation ? 'Success' : 'warning',\n    message, resultValidation ? 'success' : 'warning'\n  );\n\n  if (field) {\n    const targetField = form.querySelector(`input[name=\"${field}\"]`);\n\n    targetField.focus();\n  };\n\n  if (resultValidation) {\n    tBody.insertAdjacentHTML('beforeend', maskNewRow());\n    form.reset();\n  }\n});\n\nfunction formValidation() {\n  const settings = {\n    minLengthName: 4,\n    minAge: 18,\n    maxAge: 90,\n  };\n  const message = {\n    errNam: 'The minimum length of the \\'name\\' field is 4 characters',\n    errAge: {\n      less: +inputAge.value\n        ? `Your age is ${inputAge.value}, You are too young`\n        : `Enter the field 'age'`,\n      more: +inputAge.value\n        ? `Your age is ${inputAge.value}, You are too old`\n        : `Enter the field 'age'`,\n    },\n    success: `User ${inputName.value} - added successfully`,\n  };\n\n  if (inputName.value.length < settings.minLengthName) {\n    return [message.errNam, false, 'name'];\n  } else if (inputAge.value < settings.minAge) {\n    return [message.errAge.less, false, 'age'];\n  } else if (inputAge.value > settings.maxAge) {\n    return [message.errAge.more, false, 'age'];\n  };\n\n  return [message.success, true];\n};\n\nconst pushNotification = (posTop, posRight, title, description, type) => {\n  const body = document.querySelector('body');\n  const block = `\n    <div class=\"notification ${type} data-qa=\"notification\"\" \n      style=\"top: ${posTop}px; right=\"${posRight}px\"\"\n    >\n      <h2 class=\"title\">${title}</h2>\n      <p>${description}</p>\n    </div>\n  `;\n\n  body.insertAdjacentHTML('afterbegin', block);\n  positionMessage.top += 140;\n\n  setTimeout(() => {\n    document.querySelector(`.notification`).remove();\n    positionMessage.top -= 140;\n  }, 2000);\n};\n\nfunction maskNewRow() {\n  return `\n    <tr>\n      <td data-qa=\"name\">${inputName.value}</td>\n      <td data-qa=\"position\">\n        ${inputPosition.value.length ? inputPosition.value : '--'}\n      </td>\n      <td data-qa=\"office\">${inputOffice.value}</td>\n      <td data-qa=\"age\">${inputAge.value}</td>\n      <td data-qa=\"salary\">${convertToCurrent(inputSalary.value)}</td>\n    </tr>\n  `;\n};\n\nfunction convertToCurrent(number) {\n  const numberResult = getNumbers(number);\n\n  return `$${number ? Number(numberResult).toLocaleString('en-US') : 0}`;\n};\n\nfunction getNumbers(number) {\n  return number.replace(/\\D/g, '');\n}\n\ntBody.addEventListener('dblclick', (e) => {\n  const elem = e.target;\n\n  if (elem.tagName === 'TD') {\n    let elemValue = elem.textContent;\n\n    if (elem.dataset.qa === 'salary') {\n      elemValue = getNumbers(elemValue);\n    }\n\n    elem.innerHTML = `\n      <input\n        type=\"text\"\n        class=\"cell-input\"\n        value=\"${elemValue}\"\n      >\n    `;\n\n    const input = elem.querySelector('.cell-input');\n\n    input.focus();\n    input.selectionStart = elemValue.length;\n\n    input.addEventListener('blur', () => {\n      elem.innerHTML = elem.dataset.qa === 'salary'\n        ? convertToCurrent(input.value)\n        : input.value;\n    });\n\n    input.addEventListener('keydown', (event) => {\n      if (event.code === 'Enter') {\n        elem.innerHTML = elem.dataset.qa === 'salary'\n          ? convertToCurrent(input.value)\n          : input.value;\n      }\n    });\n\n    input.addEventListener('keyup', (event) => {\n      if (elem.dataset.qa === 'salary' || elem.dataset.qa === 'age') {\n        input.value = input.value.replace(/[^\\d]/g, '');\n      };\n    });\n  };\n});\n"]}